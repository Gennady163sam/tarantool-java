package org.tarantool;

import java.io.Closeable;
import java.io.InputStream;
import java.math.BigInteger;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

/**
 * A set of data representing a Tarantool result set, which
 * is generated by executing a request to the database.
 * <p>
 * A <code>TarantoolResultSet</code> object maintains a cursor pointing
 * to its current row of data. Initially the cursor is positioned
 * before the first row. The <code>next</code> method moves the
 * cursor to the next row and returns <code>false</code>
 * when there are no more rows in the result. In the same way the
 * <code>previous</code> method works to move backward.
 * <p>
 * A typical use case it to iterate through the result using while loop:
 *
 * <pre>
 *       TarantoolResultSet result = client.executeRequest(Requests.selectRequest("space", "pk"));
 *       while (result.next()) {
 *           long id = result.getLong(0);
 *           String text = result.getString(1);
 *           processEntry(id, text);
 *       }
 * </pre>
 *
 * The <code>TarantoolResultSet</code> interface provides
 * <i>getter</i> methods (<code>getBoolean</code>, <code>getLong</code>,
 * and so on) for retrieving column values from the current row using
 * column indexes. Columns are numbered from zero. For maximum portability,
 * result set columns within each row should be read in left-to-right order,
 * and each column should be read only once.
 * <p>
 * For the getter methods, a result set attempts to convert the underlying
 * data to the Java type specified in the getter method and returns a suitable
 * Java value.
 * <p>
 * There are possible internal conversations:
 * <ol>
 *     <li>Between numeric types such as byte, short, int, long, float, double, and big int</li>
 *     <li>Between boolean type and numeric types where zero means false and one means true</li>
 *     <li>Between string type and any other types, if a string represents a convertible value</li>
 * </ol>
 */
public interface TarantoolResultSet extends Closeable {

    /**
     * Shift a result by one tuple next.
     * Must be invoked
     *
     * @return {@literal true} if next tuple is selected
     */
    boolean next();

    /**
     * Moves a result to on tuple before, if it is possible.
     *
     * @return {@literal true} if previous tuple is selected
     */
    boolean previous();

    /**
     * Gets a tuple value as a byte.
     *
     * @param columnIndex positive index
     *
     * @return value as a byte or zero if value is null
     */
    byte getByte(int columnIndex);

    /**
     * Gets a tuple value as a short.
     *
     * @param columnIndex positive index
     *
     * @return value as a short or zero if value is null
     */
    short getShort(int columnIndex);

    /**
     * Gets a tuple value as an integer.
     *
     * @param columnIndex positive index
     *
     * @return value as an integer or zero if value is null
     */
    int getInt(int columnIndex);

    /**
     * Gets a tuple value as a long integer.
     *
     * @param columnIndex positive index
     *
     * @return value as a long or zero if value is null
     */
    long getLong(int columnIndex);

    /**
     * Gets a tuple value as a {@link java.math.BigInteger}.
     *
     * @param columnIndex positive index
     *
     * @return value as a long or zero if value is null
     */
    BigInteger getBigInteger(int columnIndex);

    /**
     * Gets a tuple value as a boolean.
     *
     * @param columnIndex positive index
     *
     * @return value as a boolean or {@literal false} if value is null
     */
    boolean getBoolean(int columnIndex);

    /**
     * Gets a tuple value as a float.
     *
     * @param columnIndex positive index
     *
     * @return value as a float or zero if value is null
     */
    float getFloat(int columnIndex);

    /**
     * Gets a tuple value as a double.
     *
     * @param columnIndex positive index
     *
     * @return value as a double or zero if value is null
     */
    double getDouble(int columnIndex);

    /**
     * Gets a tuple value as a byte array.
     *
     * @param columnIndex positive index
     *
     * @return value as a byte array or {@literal null}
     */
    byte[] getBytes(int columnIndex);

    /**
     * Gets a tuple value as a string.
     *
     * @param columnIndex positive index
     *
     * @return value as a string or {@literal null}
     */
    String getString(int columnIndex);

    /**
     * Gets a tuple value as is.
     * The actual value type is a type serialized by MsgPack.
     * This method is similar to {@code getObject(columnIndex, Collections.emptyMap())}.
     *
     * @param columnIndex positive index
     *
     * @return value as a string or {@literal null}
     *
     * @see MsgPackLite#unpack(InputStream)
     */
    Object getObject(int columnIndex);

    /**
     * Gets a tuple value and apply an extra transformation
     * if the value's type matches the type provided by a user.
     * The original value type is a type serialized by MsgPack.
     *
     * @param columnIndex positive index
     * @param mappers     additional mappers to be applied to
     *                    the matched types
     *
     * @return value as a string or {@literal null}
     *
     * @see MsgPackLite#unpack(InputStream)
     */
    Object getObject(int columnIndex, Map<Class<?>, Function<Object, Object>> mappers);

    /**
     * Gets a tuple value as a list.
     * Typical list value is a Tarantool array such
     * as {@code {'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'}}.
     *
     * @param columnIndex positive index
     *
     * @return value as a list or {@literal null}
     */
    List<Object> getList(int columnIndex);

    /**
     * Gets a tuple value as a map.
     * Typical map value is a Tarantool map such as {@code {x=0,y=1,color='red'}}.
     *
     * @param columnIndex positive index
     *
     * @return value as a map or {@literal null}
     */
    Map<Object, Object> getMap(int columnIndex);

    /**
     * Checks whether a designated column is null.
     * This method can be invoked in addition to primitive get{Byte,Short,Int,Long}
     * methods to distinguish the zero results.
     *
     * @param columnIndex positive index
     *
     * @return {@literal true} if column is null
     */
    boolean isNull(int columnIndex);

    /**
     * Gets the current tuple index.
     * The index is zero based.
     *
     * @return selected tuple size
     */
    int getRow();

    /**
     * Get a number of columns for the current tuple.
     *
     * @return tuple size
     */
    int getRowSize();

    /**
     * Checks whether a result does not
     * have tuples.
     *
     * @return {@literal true} if no tuples are received
     */
    boolean isEmpty();

    /**
     * Gets a tuples count in a result.
     *
     * @return result set size
     */
    int size();

}

